package media.toloka.rfa.radio.admin;

import lombok.extern.java.Log;
import lombok.extern.log4j.Log4j;
import lombok.extern.log4j.Log4j2;
import media.toloka.rfa.radio.client.service.ClientService;
import media.toloka.rfa.radio.model.Clientdetail;
import media.toloka.rfa.radio.model.Documents;
import media.toloka.rfa.radio.store.Service.StoreService;
import media.toloka.rfa.radio.store.model.Store;
import media.toloka.rfa.security.model.ERole;
import media.toloka.rfa.security.model.Users;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.text.DecimalFormat;
import java.util.*;

@Profile("Front")
@Controller
@Log4j2
public class AdminPrepare {

    @Autowired
    private ClientService clientService;

    @Autowired
    private StoreService storeService;

    private static void performAction(File file1, File file2) {
        try {
            // –ö–∞—Ç–∞–ª–æ–≥ –ø–µ—Ä—à–æ–≥–æ —Ñ–∞–π–ª—É
            File parentDir = file1.getParentFile();

            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            String name = file1.getName();
//            int dotIndex = name.lastIndexOf(".");
//            String baseName = (dotIndex > 0) ? name.substring(0, dotIndex) : name;
//            String extension = (dotIndex > 0) ? name.substring(dotIndex) : "";

            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ —ñ–º‚Äô—è –∑ "_source"
//            String newName = baseName + extension + "._source";
            String newName = name + "._source";
            File renamedFile1 = new File(parentDir, newName);

            // –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è
            boolean renamed = file1.renameTo(renamedFile1);
            if (!renamed) {
                System.out.println("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ñ–∞–π–ª.");
                return;
            }
            System.out.println("‚úÖ –ü–µ—Ä—à–∏–π —Ñ–∞–π–ª –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞: " + renamedFile1.getName());

            // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª—É –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø–µ—Ä—à–æ–≥–æ
            Path targetPath = Path.of(parentDir.getAbsolutePath(), file2.getName());
            Files.move(file2.toPath(), targetPath, StandardCopyOption.REPLACE_EXISTING);

            System.out.println("‚úÖ –î—Ä—É–≥–∏–π —Ñ–∞–π–ª –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É –ø–µ—Ä—à–æ–≥–æ: " + targetPath);
        } catch (IOException e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è: " + e.getMessage());
        }
    }

    @GetMapping(value = "/admin/prepare/mp3")
    public String getUserHome(
            Model model) {
        Users user = clientService.GetCurrentUser();
        if (user == null) {
            return "redirect:/";
        }
        // –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏, —á–∏ –∞–¥–º—ñ–Ω —Ç—É—Ç –ø—Ä–∞—Ü—é—î
        if (!clientService.checkRole(user, ERole.ROLE_ADMIN)) return "redirect:/logout";
        log.info("–û–ø—Ä–∞—Ü—å–æ–≤—É—î–º–æ mp3 —Ñ–∞–π–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–∫–ª—é—á–Ω–æ –ø—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ");
        String dirPrepared = "/tmp/";
        List<Store> storeList = storeService.GetAll();
        // –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –≤–µ—Å—å store —ñ –≤–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∑–≤—É–∫–æ–≤—ñ —Ñ–∞–π–ª–∏
        for (Store store : storeList) {
            if (store.getContentMimeType().contains("audio/")) {
                String locateFile = store.getFilepatch(); // –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —É —Å—Ö–æ–≤–∏—â—ñ
                String fileName = store.getFilename();    // –Ü–º º—è —Ñ–∞–π–ª—É
                String outputFile = dirPrepared + fileName;

                // –§–æ—Ä–º—É—î–º–æ –∫–æ–º–∞–Ω–¥—É —è–∫ —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
                List<String> command = Arrays.asList(
                        "ffmpeg", "-y",
                        "-i", locateFile,
                        "-map", "0:a:0",
                        "-b:a", "48k",
                        outputFile
                );

                try {
                    ProcessBuilder builder = new ProcessBuilder(command);
                    builder.redirectErrorStream(true); // –æ–±'—î–¥–Ω—É—î stderr —Ç–∞ stdout

                    Process process = builder.start();

                    // –ß–∏—Ç–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É –∫–æ–º–∞–Ω–¥–∏
                    try (BufferedReader reader = new BufferedReader(
                            new InputStreamReader(process.getInputStream()))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            System.out.println(line);
                        }
                    }

                    int exitCode = process.waitFor();
                    if (exitCode != 0) {
                        System.out.println("‚ö†Ô∏è ffmpeg –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º: " + exitCode + " –¥–ª—è —Ñ–∞–π–ª—É: " + locateFile);
                    } else {
                        System.out.println(" ‚úÖ ffmpeg –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ —á—É–¥–æ–≤–∏–º –∫–æ–¥–æ–º: –¥–ª—è —Ñ–∞–π–ª—É: " + locateFile);
                    }

                } catch (IOException | InterruptedException e) {
                    System.out.println("–ô–æ–π! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! " + locateFile);
                    e.printStackTrace();
                }
                // –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
                // –∑–º—ñ–Ω—é—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª–∞ —É —Å—Ö–æ–≤–∏—â—ñ
                // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä –Ω–æ–≤–æ–≥–æ —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—ñ–≤
                // –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
                File file1 = new File(locateFile);
                File file2 = new File(outputFile);

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
                if (!file1.exists()) {
                    System.out.println("‚ùå –ü–µ—Ä—à–∏–π —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: " + file1.getAbsolutePath());
//                    return;
                }

                if (!file2.exists()) {
                    System.out.println("‚ùå –î—Ä—É–≥–∏–π —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: " + file2.getAbsolutePath());
//                    return;
                }

                long size1 = file1.length();
                long size2 = file2.length();

                if (size1 == 0 || size2 == 0) {
                    System.out.println("‚ö†Ô∏è –û–¥–∏–Ω —ñ–∑ —Ñ–∞–π–ª—ñ–≤ –º–∞—î —Ä–æ–∑–º—ñ—Ä 0 –±–∞–π—Ç. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.");
//                    return;
                }

                // –û–±—á–∏—Å–ª—é—î–º–æ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è
                double ratio = (double) size1 / size2;

                // –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ 1 –∑–Ω–∞–∫–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏
                DecimalFormat df = new DecimalFormat("#.#");
                String rounded = df.format(ratio);

                System.out.println("üìè –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: –ø–µ—Ä—à–∏–π / –¥—Ä—É–≥–∏–π = " + rounded);

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤–∏ ‚â• 1.5
                if (ratio >= 1.5) {

                    performAction(file1, file2);


                    // üéØ –¢—É—Ç –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥—ñ—ó
                    // —è–∫—â–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª –º–µ–Ω—à–µ –Ω—ñ–∂ —É –ø—ñ–≤—Ç–æ—Ä–∞ —Ä–∞–∑–∏, —Ç–æ –∑–∞–º—ñ–Ω—é—î–º–æ –¥–∂–µ—Ä–µ–ª—å–Ω–∏–π —Ñ–∞–π–ª

                    // –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –¥–∂–µ—Ä–µ–ª—å–Ω–∏–π —Ñ–∞–π–ª

                    // –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª –≤ —Å—Ö–æ–≤–∏—â–µ

                    // –ø–µ—Ä–µ–ø–∏—Å—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É.
                    log.info("–°—Ç–∞—Ä–∏–π —Ä–æ–∑–º—ñ—Ä {} - –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä {} . –ö–æ–µ—Ñ—ñ—Ü—ñ–µ–Ω—Ç {}", size1, size2, rounded);
                    store.setFilelength(size2);

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Å —É –±–∞–∑—ñ
                    store.setPreparedate(new Date());
                    store.setPrepared(0);
                    storeService.SaveStore(store);
                    // –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª
//                    File fileToDelete = new File(outputFile);
//                    boolean success = fileToDelete.delete();
                } else {
                    System.out.println("‚ÑπÔ∏è –ü–µ—Ä—à–∏–π —Ñ–∞–π–ª –ù–ï –ø–µ—Ä–µ–≤–∏—â—É—î –¥—Ä—É–≥–∏–π —É 1.5 —Ä–∞–∑–∏");
                }
            }



        }
//        model.addAttribute("clientdetailList", clientdetailList );
        return "/admin/documents";
    }
}
