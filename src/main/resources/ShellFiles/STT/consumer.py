import os
import shutil
import pika
import json
from config_loader import config
import whisper
import pathlib
import requests
from datetime import datetime

# https://labex.io/tutorials/linux-how-to-install-whisper-cli-on-linux-437909
# https://www.digitalocean.com/community/tutorials/how-to-generate-and-add-subtitles-to-videos-using-python-openai-whisper-and-ffmpeg

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó RabbitMQ
rabbitmq_host = config["rabbitmq"]["host"]
rabbitmq_port = config["rabbitmq"]["port"]
rabbitmq_user = config["rabbitmq"]["username"]
rabbitmq_password = config["rabbitmq"]["password"]
input_queue = config["rabbitmq"]["input_queue"]
rabbitmq_vhost = config["rabbitmq"]["vhost"]
tts_host = config["users"]["tts"]["server"]
tts_user = config["users"]["tts"]["user"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_password)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host=rabbitmq_host,
        port=rabbitmq_port,
        virtual_host=rabbitmq_vhost,  # –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π —Ö–æ—Å—Ç
        credentials=credentials,
        heartbeat=600,
        blocked_connection_timeout=300
    )
)
channel = connection.channel()

# –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è —á–µ—Ä–≥
channel.queue_declare(queue=input_queue, durable=True)
resultText = ""


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –∑—ñ –∑–≤—É–∫–æ–º
# 
# def load_voice_file(sttuuuid,voice)

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def process_stt(stt_rpc_obj):
    print(stt_rpc_obj)
    resultText = ""

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –∑—ñ –∑–≤—É–∫–æ–º
    pathdir = '/tmp/' + stt_rpc_obj['sttUUID']
    isExist = os.path.exists(pathdir)
    if not isExist:
        os.makedirs(pathdir)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –∑ –≥–æ–ª–æ—Å–æ–º –¥–ª—è –ø—Ä–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è 
    # https://rfa.toloka.media/store/content/og/c856b21c-3b51-40c5-a010-f9739b474312/8a362736-8965-461f-ad2f-e37433fcad27.mp3
    url = f"{stt_rpc_obj['front']['globalserver']}/store/content/og/{stt_rpc_obj['uuidvoice']}/{stt_rpc_obj['filenamevoice']}"

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()  # –≤–∏–∫–ª–∏–∫–∞—î HTTPError –¥–ª—è 4xx/5xx
    except HTTPError as e:
        print(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {e} (–∫–æ–¥ {e.response.status_code})")

    except Timeout:
        print("‚è∞ –ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è!")

    except ConnectionError:
        print("üîå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º!")

    except RequestException as e:
        print(f"üí• –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")

    except ValueError:
        print("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î JSON")

    # –§–æ—Ä–º—É—î–º–æ —ñ–º º—è —Ñ–∞–π–ª—É
    # print(f"FileNameVoice: {stt_rpc_obj['filenamevoice']}")
    localVoiceFileName = pathdir + "/" + stt_rpc_obj["sttUUID"] + pathlib.Path(stt_rpc_obj['filenamevoice']).suffix
    # print("–õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑ –≥–æ–ª–æ—Å–æ–º: " + localVoiceFileName)
    # print(pathlib.Path('yourPath.example').suffix)  # '.example'
    # print(pathlib.Path("hello/foo.bar.tar.gz").suffixes)  # ['.bar', '.tar', '.gz']
    # print(pathlib.Path('/foo/bar.txt').stem)  # 'bar'

    try:
        with open(localVoiceFileName, 'wb') as file:
            file.write(response.content)
        print(f"–§–∞–π–ª –∑ –≥–æ–ª–æ—Å–æ–º —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {localVoiceFileName}")
    except IOError as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É —Ñ–∞–π–ª: {localVoiceFileName}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É —Ñ–∞–π–ª: {e}")

    audio = whisper.load_audio(localVoiceFileName)
    model = whisper.load_model(stt_rpc_obj["model"], device='cpu')
    result = model.transcribe(audio)
    # result = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ Whisper"

    # –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –∑ –≥–æ–ª–æ—Å–æ–º
    shutil.rmtree(pathdir)

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    resultText = result["text"]
    # resultText = "Output text for front server"
    # localTextFileName = pathdir + "/" + stt_rpc_obj["sttUUID"] + ".txt"
    # try:
    #     with open(localTextFileName, 'wb') as file:
    #         file.write(resultText.encode('utf-8'))
    #     print(f"–§–∞–π–ª –∑ —Ç–µ–∫—Å—Ç–æ–º —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {localTextFileName}")
    # except IOError as e:
    #     print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É —Ñ–∞–π–ª: {localTextFileName}")
    #     print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É —Ñ–∞–π–ª: {e}")

    print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å CTRL+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
    # –û–±—Ä–æ–±–∏—Ç–∏ –Ω–µ—à—Ç–∞—Ç–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó
    return 0, resultText, result;


# –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def callback(ch, method, properties, body):
    print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {body} ")

    startjob = datetime.now()
    # –†–æ–∑–±–∏—Ä–∞—î–º–æ JSON —É Python-—Å–ª–æ–≤–Ω–∏–∫
    rpc_obj = json.loads(body.decode())

    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ä–æ–±–æ—Ç—É –∑ whisper
    rc, resultText, resultObject = process_stt(rpc_obj)

    rpc_obj["rc"] = rc
    # print(f"Result text :{resultText}")

    rpc_obj["rJobType"] = "JOB_STT_FILES_READY"
    rpc_obj['stt']['localserver'] = tts_host
    rpc_obj["stt"]["user"] = tts_user
    rpc_obj["text"] = resultText
    rpc_obj['backServer']['addparametrs'] = json.dumps(resultObject)
    endjob = datetime.now()
    rpc_obj["endjob"] = endjob.isoformat()
    rpc_obj["startjob"] = startjob.isoformat()
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–∞–¥ —É JSON
    output_json = json.dumps(rpc_obj)
    # print("Output json: " + output_json)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É –≤–∏—Ö—ñ–¥–Ω—É —á–µ—Ä–≥—É
    output_queue = rpc_obj["front"]["localserver"]
    # print("Queue out: " + output_queue)
    channel.queue_declare(queue=rpc_obj["front"]["localserver"], durable=True)
    channel.basic_publish(exchange="", routing_key=output_queue, body=output_json)
    ch.basic_ack(delivery_tag=method.delivery_tag)  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è


# audio_file = "./19bcba96-fcc8-4833-b2e5-653c81530d55.mp3"
# audio = whisper.load_audio(audio_file)
# model = whisper.load_model("turbo", device='cpu')
# result = model.transcribe(audio)
# print(result)

# –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ö—ñ–¥–Ω—É —á–µ—Ä–≥—É
channel.basic_consume(queue=input_queue, on_message_callback=callback)

print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å CTRL+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
channel.start_consuming()
