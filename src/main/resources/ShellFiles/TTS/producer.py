import pika
import json
from config_loader import config

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó RabbitMQ
rabbitmq_host = config["rabbitmq"]["host"]
rabbitmq_port = config["rabbitmq"]["port"]
rabbitmq_user = config["rabbitmq"]["username"]
rabbitmq_password = config["rabbitmq"]["password"]
rabbitmq_vhost = config["rabbitmq"]["vhost"]
input_queue = config["rabbitmq"]["input_queue"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_password)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
connection = pika.BlockingConnection(
        pika.ConnectionParameters(
            host=rabbitmq_host,
            port=rabbitmq_port,
            virtual_host=rabbitmq_vhost,  # –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π —Ö–æ—Å—Ç
            credentials=credentials
        )
)
channel = connection.channel()

# –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è —á–µ—Ä–≥–∏
channel.queue_declare(queue=input_queue, durable=True)

# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
message = {
    "rJobType": "NEWS_PROCESSING",
    "stationUUID": "123e4567-e89b-12d3-a456-426614174000",
    "newsUUID": "987e6543-e21b-34c3-b567-426614174999",
    "text": "Breaking news: Python and RabbitMQ!",
    "rc": 200
}

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON —É —á–µ—Ä–≥—É
message_json = json.dumps(message)
channel.basic_publish(exchange="", routing_key=input_queue, body=message_json)
print(f"üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É {input_queue}: {message_json}")

# –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è 1
connection.close()
