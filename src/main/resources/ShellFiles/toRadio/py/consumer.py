import os
import pika
import json
from config_loader import config
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó RabbitMQ
rabbitmq_host = config["rabbitmq"]["host"]
rabbitmq_port = config["rabbitmq"]["port"]
rabbitmq_user = config["rabbitmq"]["username"]
rabbitmq_password = config["rabbitmq"]["password"]
input_queue = config["rabbitmq"]["input_queue"]
rabbitmq_vhost = config["rabbitmq"]["vhost"]
locateDir = config["locateDir"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_password)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
connection = pika.BlockingConnection(
        pika.ConnectionParameters(
            host=rabbitmq_host,
            port=rabbitmq_port,
            virtual_host=rabbitmq_vhost,  # –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π —Ö–æ—Å—Ç
            credentials=credentials
        )
)
channel = connection.channel()

# –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è —á–µ—Ä–≥
channel.queue_declare(queue=input_queue, durable=True)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á —ñ–∑ —Ñ–∞–π–ª—É
def load_private_key(guiServer):
    with open(locateDir+"/"+guiServer+".priv", "rb") as key_file:
        key_bytes = base64.b64decode(key_file.read())
        return RSA.import_key(key_bytes)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def decrypt_rsa(encrypted_message_base64, private_key):
    cipher_rsa = PKCS1_OAEP.new(private_key)
    encrypted_bytes = base64.b64decode(encrypted_message_base64)
    decrypted_bytes = cipher_rsa.decrypt(encrypted_bytes)
    return decrypted_bytes.decode('utf-8')

# –ó–±–µ—Ä—ñ–≥–∞—î–∏–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –≤—ñ–¥ gui —Å–µ—Ä–≤–µ—Ä–∞
def SavePrivateKey(news_rpc_obj)
    #breakpoint()
    with open(locateDir+"/"+guiServer+".priv", "wb") as private_file:
        public_file.write(news_rpc_obj["key"])


# –≤—ñ–ø—Ä–∞–≤–ª—è—î–º–æ –∑—ñ —Å—Ç–æ—Ä–µ –≤ –µ—Ñ—ñ—Ä
def ToRadio(news_rpc_obj)
    #breakpoint()
    private_key = load_private_key("private_key.pem")
    criptpsw =  news_rpc_obj["password"]
    guiserver =  news_rpc_obj["guiserver"]
    private_key = load_private_key(guiserver)
    decrypted_message = decrypt_rsa(criptpsw, private_key)
    # —Ñ–æ—Ä–º—É—î–º–æ –∫–æ–º–∞–Ω–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    cmd = "ffmpeg -re -v quiet -stats -i https://front.rfa.toloka.media/store/audio/" + news_rpc_obj["newsUUID"]
    +   "https://front.rfa.toloka.media:" + news_rpc_obj["mainport"]
    + "/" +  news_rpc_obj["mainpoint"]
    print (cmd)
# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def process_toRadio(news_rpc_obj):
    #breakpoint()
    match news_rpc_obj["job"]:
        case "toRadiokey":
             SavePrivKey(news_rpc_obj)
        case "toRadio":
             ToRadio(news_rpc_obj)
        case _:
            print("–Ø–∫—ñ—Å—å —Ñ—ñ–≥–Ω—è –ø—Ä–µ–ª–∫—Ç—ñ–ª–∞")



    print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å CTRL+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
    # –û–±—Ä–æ–±–∏—Ç–∏ –Ω–µ—à—Ç–∞—Ç–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó
    return 0;

# –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def callback(ch, method, properties, body):
    print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    # –†–æ–∑–±–∏—Ä–∞—î–º–æ JSON —É Python-—Å–ª–æ–≤–Ω–∏–∫
    news_rpc_obj = json.loads(body.decode())

    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    news_rpc_obj["rc"] = process_tts(news_rpc_obj)
    news_rpc_obj["rJobType"] = "JOB_TTS_FILES_READY"
    news_rpc_obj["tts"]["server"] = tts_host
    news_rpc_obj["tts"]["user"] = tts_user
    news_rpc_obj["text"] = " "
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–∞–¥ —É JSON
    output_json = json.dumps(news_rpc_obj)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É –≤–∏—Ö—ñ–¥–Ω—É —á–µ—Ä–≥—É
    output_queue = news_rpc_obj["front"]["server"]

    channel.queue_declare(queue=news_rpc_obj["front"]["server"], durable=True)
    #print(f"üì§ output_queue: {rabbitmq_vhost} - {output_queue}")
    ch.basic_publish(exchange="", routing_key=output_queue, body=output_json)
    #print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É {output_queue}: {output_json}")

    ch.basic_ack(delivery_tag=method.delivery_tag)  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è

# –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ö—ñ–¥–Ω—É —á–µ—Ä–≥—É
channel.basic_consume(queue=input_queue, on_message_callback=callback)

print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å CTRL+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
channel.start_consuming()
