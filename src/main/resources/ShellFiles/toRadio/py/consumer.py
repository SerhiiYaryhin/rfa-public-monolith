import nltk
import tempfile
import os
from pydub import AudioSegment
from ukrainian_tts.tts import TTS, Voices, Stress
import pika
import json
from config_loader import config


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó RabbitMQ
rabbitmq_host = config["rabbitmq"]["host"]
rabbitmq_port = config["rabbitmq"]["port"]
rabbitmq_user = config["rabbitmq"]["username"]
rabbitmq_password = config["rabbitmq"]["password"]
input_queue = config["rabbitmq"]["input_queue"]
rabbitmq_vhost = config["rabbitmq"]["vhost"]
tts_host = config["users"]["tts"]["server"]
tts_user = config["users"]["tts"]["user"]
#print(f"üì§ input_queue: {rabbitmq_vhost} - {input_queue}")
#output_queue = config["rabbitmq"]["output_queue"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_password)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
connection = pika.BlockingConnection(
        pika.ConnectionParameters(
            host=rabbitmq_host,
            port=rabbitmq_port,
            virtual_host=rabbitmq_vhost,  # –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π —Ö–æ—Å—Ç
            credentials=credentials
        )
)
channel = connection.channel()

# –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è —á–µ—Ä–≥
channel.queue_declare(queue=input_queue, durable=True)
#channel.queue_declare(queue=output_queue, durable=True)

nltk.download("punkt")
from nltk.tokenize import sent_tokenize
tts = TTS(device="cpu")  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ "gpu" –∞–±–æ "mps" –¥–ª—è —à–≤–∏–¥—à–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó



# def process_message(news_rpc_obj):
#     """ –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ JSON """
#     news_rpc_obj["text"] = news_rpc_obj["text"].upper()  # –†–æ–±–∏–º–æ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–Ω–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏
#     news_rpc_obj["rc"] = 201  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
#     return news_rpc_obj

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def process_tts(news_rpc_obj):
    text =  news_rpc_obj["text"]
    sentences = sent_tokenize(text, language="russian")  # –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "russian"
    final_audio = AudioSegment.silent(duration=500)  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º

    for i, sentence in enumerate(sentences, 1):
        #print(f"{len(sentence)} - {i}: {sentence} ")
        with tempfile.NamedTemporaryFile(delete=True, suffix=".wav") as temp_wav:
            with open(temp_wav.name, mode="wb") as file:
                _, output_text = tts.tts(sentence, Voices.Dmytro.value, Stress.Dictionary.value, file)
            # _, output_text = tts.tts(sentence, Voices.Dmytro.value, Stress.Dictionary.value, file)
            temp_wav.seek(0)
            audio_segment = AudioSegment.from_wav(temp_wav.name)
            final_audio += audio_segment + AudioSegment.silent(duration=500)

#     final_audio.export("/tmp/"+news_rpc_obj["newsUUID"]+".wav", format="wav")
    final_audio += audio_segment + AudioSegment.silent(duration=500)
    final_audio.export("/tmp/"+news_rpc_obj["newsUUID"]+".mp3", format="mp3", bitrate="48k")
    print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å CTRL+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
    # –û–±—Ä–æ–±–∏—Ç–∏ –Ω–µ—à—Ç–∞—Ç–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó
    return 0;

# –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def callback(ch, method, properties, body):
    print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    # –†–æ–∑–±–∏—Ä–∞—î–º–æ JSON —É Python-—Å–ª–æ–≤–Ω–∏–∫
    news_rpc_obj = json.loads(body.decode())

    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    news_rpc_obj["rc"] = process_tts(news_rpc_obj)
    news_rpc_obj["rJobType"] = "JOB_TTS_FILES_READY"
    news_rpc_obj["tts"]["server"] = tts_host
    news_rpc_obj["tts"]["user"] = tts_user
    news_rpc_obj["text"] = " "
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–∞–¥ —É JSON
    output_json = json.dumps(news_rpc_obj)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É –≤–∏—Ö—ñ–¥–Ω—É —á–µ—Ä–≥—É
    output_queue = news_rpc_obj["front"]["server"]

    channel.queue_declare(queue=news_rpc_obj["front"]["server"], durable=True)
    #print(f"üì§ output_queue: {rabbitmq_vhost} - {output_queue}")
    ch.basic_publish(exchange="", routing_key=output_queue, body=output_json)
    #print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É {output_queue}: {output_json}")

    ch.basic_ack(delivery_tag=method.delivery_tag)  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è

# –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ö—ñ–¥–Ω—É —á–µ—Ä–≥—É
channel.basic_consume(queue=input_queue, on_message_callback=callback)

print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å CTRL+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
channel.start_consuming()
